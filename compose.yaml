---
x-healthcheck: &healthcheck
  interval: 10s
  timeout: 5s
  retries: 5
  start_period: 15s

x-healthy: &healthy
  condition: service_healthy

networks:
  internal:
    external: false

services:
  frontend:
    image: ${FRONTEND_IMAGE}
    container_name: sber__frontend
    healthcheck:
      <<: *healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:80"]
    networks:
      - internal
    depends_on:
      - backend
  backend:
    image: ${BACKEND_IMAGE}
    container_name: sber__backend
    environment:
      - POSTGRES_HOST=sber__postgres:5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ACCESS_TTL=${JWT_ACCESS_TTL}
      - JWT_REFRESH_TTL=${JWT_REFRESH_TTL}
      - GIGACHAT_CLIENT_ID=${GIGACHAT_CLIENT_ID}
      - GIGACHAT_AUTHORIZATION_KEY=${GIGACHAT_AUTHORIZATION_KEY}
    depends_on:
      postgres:
        condition: "service_healthy"
    networks:
      - internal
  postgres:
    image: ${POSTGRES_IMAGE}
    container_name: sber__postgres
    healthcheck:
      <<: *healthcheck
      start_period: 1s
      test:
        ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - internal
volumes:
  pgdata:
    driver: local
